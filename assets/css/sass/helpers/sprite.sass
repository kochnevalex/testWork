/*
  SASS variables are information about icon's compiled state, stored under its original file name

  .icon-home
    width: $icon-home-width

  The large array-like variables contain all information about a single icon
  $icon-home: x y offset_x offset_y width height total_width total_height image_path

  At the bottom of this section, we provide information about the spritesheet itself
  $spritesheet: width height image $spritesheet-sprites
  */
$arrow-down-name: 'arrow-down'
$arrow-down-x: 52px
$arrow-down-y: 19px
$arrow-down-offset-x: -52px
$arrow-down-offset-y: -19px
$arrow-down-width: 8px
$arrow-down-height: 6px
$arrow-down-total-width: 70px
$arrow-down-total-height: 33px
$arrow-down-image: 'sprite.png'
$arrow-down: (52px, 19px, -52px, -19px, 8px, 6px, 70px, 33px, 'sprite.png', 'arrow-down', )
$basket-name: 'basket'
$basket-x: 0px
$basket-y: 0px
$basket-offset-x: 0px
$basket-offset-y: 0px
$basket-width: 30px
$basket-height: 33px
$basket-total-width: 70px
$basket-total-height: 33px
$basket-image: 'sprite.png'
$basket: (0px, 0px, 0px, 0px, 30px, 33px, 70px, 33px, 'sprite.png', 'basket', )
$recall-right-name: 'recall-right'
$recall-right-x: 34px
$recall-right-y: 0px
$recall-right-offset-x: -34px
$recall-right-offset-y: 0px
$recall-right-width: 14px
$recall-right-height: 25px
$recall-right-total-width: 70px
$recall-right-total-height: 33px
$recall-right-image: 'sprite.png'
$recall-right: (34px, 0px, -34px, 0px, 14px, 25px, 70px, 33px, 'sprite.png', 'recall-right', )
$twitter-name: 'twitter'
$twitter-x: 52px
$twitter-y: 0px
$twitter-offset-x: -52px
$twitter-offset-y: 0px
$twitter-width: 18px
$twitter-height: 15px
$twitter-total-width: 70px
$twitter-total-height: 33px
$twitter-image: 'sprite.png'
$twitter: (52px, 0px, -52px, 0px, 18px, 15px, 70px, 33px, 'sprite.png', 'twitter', )
$spritesheet-width: 70px
$spritesheet-height: 33px
$spritesheet-image: 'sprite.png'
$spritesheet-sprites: ($arrow-down, $basket, $recall-right, $twitter, )
$spritesheet: (70px, 33px, 'sprite.png', $spritesheet-sprites, )

/*
  The provided mixins are intended to be used with the array-like variables

  .icon-home
    @include sprite-width($icon-home)

  .icon-email
    @include sprite($icon-email)

  Example usage in HTML:
    `display: block` sprite:
    <div class="icon-home"></div>

  To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
    // CSS
    .icon {
      display: inline-block;
    }

    // HTML
    <i class="icon icon-home"></i>
  */
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

/*
  The `sprites` mixin generates identical output to the CSS template
    but can be overridden inside of SASS

  @include sprites($spritesheet-sprites)
  */
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
