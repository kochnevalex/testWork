@charset 'UTF-8';
/**------------------------------------------------------------------
 * [Table of contents | Main style]
 *
 * 1. Typography #typography
 * 2. Variables #variables
 * 3. Colors #colors
 * 4. Mixins #mixins
 */
/**
 * Typography #typography
 */
/**
 * Colors #colors
 */
@-webkit-keyframes showOpacity
{
    0%
    {
        display: block;

        opacity: 0;
    }
    100%
    {
        display: block;

        opacity: 1;
    }
}
@-o-keyframes showOpacity
{
    0%
    {
        display: block;

        opacity: 0;
    }
    100%
    {
        display: block;

        opacity: 1;
    }
}
@keyframes showOpacity
{
    0%
    {
        display: block;

        opacity: 0;
    }
    100%
    {
        display: block;

        opacity: 1;
    }
}

@-webkit-keyframes showOpacityTilt
{
    0%
    {
        display: block;

        -webkit-transform: translate3d(0, 10%, 0);
                transform: translate3d(0, 10%, 0); 

        opacity: 0;
    }
    100%
    {
        display: block;

        -webkit-transform: translate3d(0, 0, 0);
                transform: translate3d(0, 0, 0); 

        opacity: 1;
    }
}

@-o-keyframes showOpacityTilt
{
    0%
    {
        display: block;

        transform: translate3d(0, 10%, 0); 

        opacity: 0;
    }
    100%
    {
        display: block;

        transform: translate3d(0, 0, 0); 

        opacity: 1;
    }
}

@keyframes showOpacityTilt
{
    0%
    {
        display: block;

        -webkit-transform: translate3d(0, 10%, 0);
                transform: translate3d(0, 10%, 0); 

        opacity: 0;
    }
    100%
    {
        display: block;

        -webkit-transform: translate3d(0, 0, 0);
                transform: translate3d(0, 0, 0); 

        opacity: 1;
    }
}

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
/**
 * Mixins #mixins
 */
/* Slider */
.slick-slider
{
    position: relative;

    display: block;

    -webkit-box-sizing: border-box;
            box-sizing: border-box;

    -webkit-user-select: text;
       -moz-user-select: text;
        -ms-user-select: text;
            user-select: text;

    -webkit-touch-callout: none;
    -ms-touch-action: auto;
        touch-action: auto;
    -webkit-tap-highlight-color: transparent;
}

.slick-list
{
    position: relative;

    display: block;
    overflow: hidden;

    margin: 0;
    padding: 0;
}
.slick-list:focus
{
    outline: none;
}
.slick-list.dragging
{
    cursor: pointer;
    cursor: hand;
}

.slick-slider .slick-track,
.slick-slider .slick-list
{
    -webkit-transform: translate3d(0, 0, 0);
        -ms-transform: translate3d(0, 0, 0);
         -o-transform: translate3d(0, 0, 0);
            transform: translate3d(0, 0, 0);
}

.slick-track
{
    position: relative;
    top: 0;
    left: 0;

    display: block;
}
.slick-track::before,
.slick-track::after
{
    display: table; 

    content: '';
}
.slick-track::after
{
    clear: both;
}
.slick-loading .slick-track
{
    visibility: hidden;
}

.slick-slide
{
    display: none; 
    float: left;

    height: 100%;
    min-height: 1px;
}
[dir='rtl'] .slick-slide
{
    float: right;
}
.slick-slide img
{
    display: block;
}
.slick-slide.slick-loading img
{
    display: none;
}
.slick-slide.dragging img
{
    pointer-events: none;
}
.slick-initialized .slick-slide
{
    display: block;
}
.slick-loading .slick-slide
{
    visibility: hidden;
}
.slick-vertical .slick-slide
{
    display: block;

    height: auto;

    border: 1px solid transparent;
}

.slick-arrow.slick-hidden
{
    display: none;
}

/* Slider */
/* Icons */
/* Arrows */
.slick-prev,
.slick-next
{
    font-size: 0;
    line-height: 0;

    position: absolute;
    top: 50%;

    display: block;

    width: 20px;
    height: 20px;
    margin-top: -10px\9;
    padding: 0;

    cursor: pointer;
    /*lte IE 8*/
    -webkit-transform: translate(0, -50%);
        -ms-transform: translate(0, -50%);
         -o-transform: translate(0, -50%);
            transform: translate(0, -50%);

    color: transparent;
    border: none;
    outline: none; 
    background: transparent;
}
.slick-prev:hover,
.slick-prev:focus,
.slick-next:hover,
.slick-next:focus
{
    color: transparent; 
    outline: none;
    background: transparent;
}
.slick-prev:hover::before,
.slick-prev:focus::before,
.slick-next:hover::before,
.slick-next:focus::before
{
    opacity: 1;
}
.slick-prev.slick-disabled::before,
.slick-next.slick-disabled::before
{
    opacity: .25;
}

.slick-prev::before,
.slick-next::before
{
    font-family: 'slick';
    font-size: 20px;
    line-height: 1;

    opacity: .75;
    color: white;

    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

.slick-prev
{
    left: -25px;
}
[dir='rtl'] .slick-prev
{
    right: -25px; 
    left: auto;
}
.slick-prev::before
{
    content: '←';
}
[dir='rtl'] .slick-prev::before
{
    content: '→';
}

.slick-next
{
    right: -25px;
}
[dir='rtl'] .slick-next
{
    right: auto; 
    left: -25px;
}
.slick-next::before
{
    content: '→';
}
[dir='rtl'] .slick-next::before
{
    content: '←';
}

/* Dots */
.slick-slider
{
    margin-bottom: 30px;
}

.slick-dots
{
    position: absolute;
    bottom: -45px;

    display: block;

    width: 100%; 
    padding: 0;

    list-style: none;

    text-align: center;
}
.slick-dots li
{
    position: relative;

    display: inline-block;

    width: 20px;
    height: 20px;
    margin: 0 5px;
    padding: 0;

    cursor: pointer;
}
.slick-dots li button
{
    font-size: 0;
    line-height: 0;

    display: block;

    width: 20px;
    height: 20px;
    padding: 5px;

    cursor: pointer; 

    color: transparent;
    border: 0;
    outline: none;
    background: transparent;
}
.slick-dots li button:hover,
.slick-dots li button:focus
{
    outline: none;
}
.slick-dots li button:hover::before,
.slick-dots li button:focus::before
{
    opacity: 1;
}
.slick-dots li button::before
{
    font-family: 'slick';
    font-size: 6px;
    line-height: 20px;

    position: absolute;
    top: 0;
    left: 0;

    width: 20px;
    height: 20px;

    content: '•';
    text-align: center;

    opacity: .25;
    color: black;

    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}
.slick-dots li.slick-active button::before
{
    opacity: .75; 
    color: black;
}

ul li
{
    display: block;

    width: 30px;
    width: 30px;
    height: 30px;
    height: 30px; 

    background-image: url(../images/sprite.png);
    background-position: 0 0;
}

/*# sourceMappingURL=global.css.map */
